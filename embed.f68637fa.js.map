{"version":3,"sources":["embed.ts"],"names":[],"mappings":"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","file":"embed.f68637fa.js","sourceRoot":"../src","sourcesContent":["import { getEmbedSnippetUrl, getEmbedUrl, getExternalUrl, getHostSlugFromUrl, getTripSlugFromUrl, hostLink, tripLink } from './config/Routes'\nimport { EmbedCopyMessage, EmbedMessage, EmbedSizeMessage, MessageListenerCallback } from './types'\nimport { getId } from './utils/helper'\nimport { register } from './utils/messenger'\ndeclare global {\n  interface Window {\n    OGWidgets: {\n      processedWidgets: HTMLAnchorElement[]\n      listenerCallbacks: MessageListenerCallback[]\n      listenerRegistered: boolean\n      registerListener: () => void\n      getWidgetCallbackUrl: (element: HTMLAnchorElement) => string | undefined\n      createIframe: (src: string) => HTMLIFrameElement\n      initializeWidget: (element: HTMLAnchorElement) => void\n      addListenerCallback: (listener: MessageListenerCallback) => void\n      getWidgetListenerCallback: (iframe: HTMLIFrameElement) => MessageListenerCallback\n      init: () => void\n    }\n  }\n}\nconst IFRAME_STYLES = {\n  border: 'none',\n  width: '0px',\n  height: '0px',\n  'overflow-x': 'hidden',\n  'overflow-y': 'hidden',\n  display: 'block',\n} as { [key: string]: string }\n\nconst IFRAME_ATTRIBUTES = {\n  scrolling: 'no',\n  frameborder: '0',\n  allowtransparency: 'true',\n  allowfullscreen: 'true',\n} as { [key: string]: string }\n\n;(function (window) {\n  const OGWidgets = {\n    processedWidgets: [],\n    listenerCallbacks: [],\n    listenerRegistered: false,\n    init: function () {\n      this.registerListener()\n      const widgets = document.querySelectorAll(`a[data-og-widget][href^=\"${getExternalUrl()}\"]`) as NodeListOf<HTMLAnchorElement>\n      widgets.forEach(this.initializeWidget.bind(this))\n    },\n\n    registerListener: function () {\n      if (!this.listenerRegistered) {\n        register((ev) => {\n          this.listenerCallbacks.forEach((listener) => listener(ev))\n        })\n        this.listenerRegistered = true\n      }\n    },\n    addListenerCallback: function (listener) {\n      this.listenerCallbacks.push(listener)\n    },\n    initializeWidget: function (element) {\n      if (this.processedWidgets.includes(element)) {\n        return\n      }\n      this.processedWidgets.push(element)\n\n      const url = this.getWidgetCallbackUrl(element)\n      if (!url) {\n        return\n      }\n\n      const iframe = this.createIframe(url)\n\n      iframe.onload = () => {\n        element.remove()\n      }\n      element.after(iframe)\n      this.addListenerCallback(this.getWidgetListenerCallback(iframe))\n    },\n    getWidgetCallbackUrl: function (element) {\n      let url\n      const {\n        href,\n        dataset: { ogCode },\n      } = element\n      if (getTripSlugFromUrl(href)) {\n        url = tripLink(getTripSlugFromUrl(href))\n      } else if (getHostSlugFromUrl(href)) {\n        url = hostLink(getHostSlugFromUrl(href))\n      }\n      return url ? (typeof ogCode !== 'undefined' ? getEmbedSnippetUrl(url) : getEmbedUrl(url)) : null\n    },\n    createIframe: function (src) {\n      let iframe: HTMLIFrameElement\n      try {\n        iframe = document.createElement('<iframe name=\"' + getId() + '\"></iframe>') as HTMLIFrameElement\n      } catch (e) {\n        iframe = document.createElement('iframe')\n        iframe.name = getId()\n      }\n      iframe.src = src + '?source=' + encodeURIComponent(window.location.origin)\n      Object.keys(IFRAME_ATTRIBUTES).forEach((attribute) => iframe.setAttribute(attribute, IFRAME_ATTRIBUTES[attribute]))\n      Object.keys(IFRAME_STYLES).forEach((style) => iframe.style.setProperty(style, IFRAME_STYLES[style]))\n      return iframe\n    },\n    getWidgetListenerCallback: function (iframe) {\n      return (event) => {\n        const {\n          origin,\n          data: { type, name },\n        } = event as MessageEvent<EmbedMessage>\n        console.log('event received from iframe', event.data)\n        if (getEmbedUrl().startsWith(origin) && iframe.name === name) {\n          switch (type) {\n            case 'size':\n              const { width, height } = event.data as EmbedSizeMessage\n              iframe.style.height = height + 'px'\n              iframe.style.width = width + 'px'\n              break\n            case 'copy':\n              const { text } = event.data as EmbedCopyMessage\n              console.log('copy text', text)\n              window.navigator.clipboard.writeText(text)\n              break\n            default:\n              console.log(event.data)\n              break\n          }\n        }\n      }\n    },\n  } as Window['OGWidgets']\n\n  if (!window.OGWidgets) {\n    OGWidgets.init()\n    window.onload = () => OGWidgets.init()\n    window.OGWidgets = OGWidgets\n  }\n})(window)\n"]}