{"version":3,"sources":["utils/helper.ts","config/Routes.ts","utils/messenger.ts","embed.ts"],"names":[],"mappings":"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","file":"embed.f68637fa.js","sourceRoot":"../src","sourcesContent":["export const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n","import { escapeRegExp } from 'src/utils/helper'\n\nexport const TRIP_PAGE = '/experiences/:slug'\nexport const HOST_PAGE = '/guides/:slug'\nexport const getTripSlugFromUrl = (url: string) => url.match(new RegExp(`^${escapeRegExp(getExternalUrl())}${TRIP_PAGE.replace(':slug', '([^/\\?]+)')}`))?.[1]\nexport const getHostSlugFromUrl = (url: string) => url.match(new RegExp(`^${escapeRegExp(getExternalUrl())}${HOST_PAGE.replace(':slug', '([^/\\?]+)')}`))?.[1]\nexport const tripLink = (slug?: string) => TRIP_PAGE.replace(':slug', slug ?? '')\nexport const hostLink = (slug?: string) => HOST_PAGE.replace(':slug', slug ?? '')\nexport const getEmbedPath = (path: string) => `/embed${path}`\nexport const getEmbedUrl = (path?: string) => `${process.env.EMBED_URL}${path ? `/#${getEmbedPath(path)}` : ''}`\nexport const getExternalUrl = (path: string = '') => `${process.env.SITE_URL}${path}`\n","import { MessageListenerCallback, MessageSender } from 'src/types'\n\nexport const send: MessageSender = (data, options) => {\n  const { target, targetOrigin = '*' } = options ?? {}\n  ;(target || window).postMessage(data, targetOrigin)\n}\n\nexport const register = (listener: MessageListenerCallback) => {\n  window.addEventListener('message', listener, false)\n}\n\nexport const unregister = (listener: MessageListenerCallback) => {\n  window.removeEventListener('message', listener, false)\n}\n","import { getEmbedUrl, getExternalUrl, getHostSlugFromUrl, getTripSlugFromUrl, hostLink, tripLink } from './config/Routes'\nimport { EmbedMessage, EmbedSizeMessage, MessageListenerCallback } from './types'\nimport { register } from './utils/messenger'\ndeclare global {\n  interface Window {\n    OGWidgets: {\n      processedWidgets: HTMLAnchorElement[]\n      listenerCallbacks: MessageListenerCallback[]\n      listenerRegistered: boolean\n      registerListener: () => void\n      getWidgetCallbackUrl: (href: string) => string | undefined\n      createIframe: () => HTMLIFrameElement\n      initializeWidget: (element: HTMLAnchorElement) => void\n      addListenerCallback: (listener: MessageListenerCallback) => void\n      getWidgetListenerCallback: (iframe: HTMLIFrameElement) => MessageListenerCallback\n      init: () => void\n    }\n  }\n}\nconst IFRAME_STYLES = {\n  border: 'none',\n  width: '0px',\n  height: '0px',\n  'overflow-x': 'hidden',\n  'overflow-y': 'hidden',\n  display: 'block',\n} as { [key: string]: string }\n\nconst IFRAME_ATTRIBUTES = {\n  scrolling: 'no',\n  frameborder: '0',\n  allowtransparency: 'true',\n  allowfullscreen: 'true',\n} as { [key: string]: string }\n\n;(function (window) {\n  const OGWidgets = {\n    processedWidgets: [],\n    listenerCallbacks: [],\n    listenerRegistered: false,\n    init: function () {\n      this.registerListener()\n      const widgets = document.querySelectorAll(`a[data-og-widget][href^=\"${getExternalUrl()}\"]`) as NodeListOf<HTMLAnchorElement>\n      widgets.forEach(this.initializeWidget.bind(this))\n    },\n\n    registerListener: function () {\n      if (!this.listenerRegistered) {\n        register((ev) => {\n          this.listenerCallbacks.forEach((listener) => listener(ev))\n        })\n        this.listenerRegistered = true\n      }\n    },\n    addListenerCallback: function (listener) {\n      this.listenerCallbacks.push(listener)\n    },\n    initializeWidget: function (element) {\n      if (this.processedWidgets.includes(element)) {\n        return\n      }\n      this.processedWidgets.push(element)\n\n      const url = this.getWidgetCallbackUrl(element.href)\n      if (!url) {\n        return\n      }\n\n      const iframe = this.createIframe()\n      iframe.src = url\n      iframe.onload = () => {\n        element.remove()\n      }\n      element.after(iframe)\n      this.addListenerCallback(this.getWidgetListenerCallback(iframe))\n    },\n    getWidgetCallbackUrl: function (href) {\n      let url\n      if (getTripSlugFromUrl(href)) {\n        url = getEmbedUrl(tripLink(getTripSlugFromUrl(href)))\n      } else if (getHostSlugFromUrl(href)) {\n        url = getEmbedUrl(hostLink(getHostSlugFromUrl(href)))\n      }\n      return url\n    },\n    createIframe: function () {\n      const iframe = document.createElement('iframe')\n      Object.keys(IFRAME_ATTRIBUTES).forEach((attribute) => iframe.setAttribute(attribute, IFRAME_ATTRIBUTES[attribute]))\n      Object.keys(IFRAME_STYLES).forEach((style) => iframe.style.setProperty(style, IFRAME_STYLES[style]))\n      return iframe\n    },\n    getWidgetListenerCallback: function (iframe) {\n      return (event) => {\n        if (getEmbedUrl().startsWith(event.origin)) {\n          const { type } = event.data as EmbedMessage\n          switch (type) {\n            case 'size':\n              const { width, height } = event.data as EmbedSizeMessage\n              iframe.style.height = height + 'px'\n              iframe.style.width = width + 'px'\n              break\n            default:\n              console.log(event.data)\n              break\n          }\n        }\n      }\n    },\n  } as Window['OGWidgets']\n\n  if (!window.OGWidgets) {\n    OGWidgets.init()\n    window.onload = () => OGWidgets.init()\n    window.OGWidgets = OGWidgets\n  }\n})(window)\n"]}