{"version":3,"sources":["utils/helper.ts","config/Routes.ts","utils/messenger.ts","embed.ts"],"names":[],"mappings":";AAAO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAAA,IAAM,EAAe,SAAC,GAAmB,OAAA,EAAO,QAAQ,sBAAuB,SAA/E,QAAA,aAAA;;ACUA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,SAAA,QAAA,mBAAA,QAAA,mBAAA,QAAA,eAAA,QAAA,YAAA,QAAA,aAAA,QAAA,UAAA,QAAA,eAAA,EAVP,IAAA,EAAA,QAAA,oBAEa,EAAY,qBAQlB,QAAA,UAAA,EAPA,IAAM,EAAY,gBAOlB,QAAA,UAAA,EANA,IAAM,EAAqB,SAAC,GAAW,IAAA,EAAK,OAAqG,QAArG,EAAA,EAAI,MAAM,IAAI,OAAO,IAAA,QAAI,EAAA,EAAA,cAAa,MAAiB,OAAG,EAAU,QAAQ,QAAS,sBAAgB,IAAA,OAAA,EAAA,EAAG,IAMpJ,QAAA,mBAAA,EALA,IAAM,EAAqB,SAAC,GAAW,IAAA,EAAK,OAAqG,QAArG,EAAA,EAAI,MAAM,IAAI,OAAO,IAAA,QAAI,EAAA,EAAA,cAAa,MAAiB,OAAG,EAAU,QAAQ,QAAS,sBAAgB,IAAA,OAAA,EAAA,EAAG,IAKpJ,QAAA,mBAAA,EAJA,IAAM,EAAW,SAAC,GAAkB,OAAA,EAAU,QAAQ,QAAS,MAAA,EAAA,EAAQ,KAIvE,QAAA,SAAA,EAHA,IAAM,EAAW,SAAC,GAAkB,OAAA,EAAU,QAAQ,QAAS,MAAA,EAAA,EAAQ,KAGvE,QAAA,SAAA,EAFA,IAAM,EAAe,SAAC,GAAiB,MAAA,SAAA,OAAS,IAEhD,QAAA,aAAA,EADA,IAAM,EAAc,SAAC,GAAkB,MAAA,GAAA,OAAwB,wBAAA,OAAG,EAAO,KAAA,OAAK,EAAa,IAAU,KACrG,QAAA,YAAA,EAAA,IAAM,EAAiB,SAAC,GAAsB,YAAtB,IAAA,IAAA,EAAA,IAAsB,GAAA,OAAuB,6BAAA,OAAG,IAAxE,QAAA,eAAA;;ACCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,KAAA,QAAA,cAAA,EATA,IAAM,EAAsB,SAAC,EAAM,GAClC,IAAA,EAAiC,MAAA,EAAA,EAAW,GAA1C,EAAM,EAAA,OAAE,EAAA,EAAA,aAAA,OAAY,IAAA,EAAG,IAAG,GAChC,GAAU,QAAQ,YAAY,EAAM,IAOjC,QAAA,KAAA,EAJA,IAAM,EAAW,SAAC,GACvB,OAAO,iBAAiB,UAAW,GAAU,IAGxC,QAAA,SAAA,EAAA,IAAM,EAAa,SAAC,GACzB,OAAO,oBAAoB,UAAW,GAAU,IAD3C,QAAA,WAAA;;ACwBN,aAnCD,IAAA,EAAA,QAAA,mBAEA,EAAA,QAAA,qBAiBM,EAAgB,CACpB,OAAQ,OACR,MAAO,MACP,OAAQ,MACR,aAAc,SACd,aAAc,SACd,QAAS,SAGL,EAAoB,CACxB,UAAW,KACX,YAAa,IACb,kBAAmB,OACnB,gBAAiB,SAGlB,SAAW,GACV,IAAM,EAAY,CAChB,iBAAkB,GAClB,kBAAmB,GACnB,oBAAoB,EACpB,KAAM,WACJ,KAAK,mBACW,SAAS,iBAAiB,4BAAA,QAA4B,EAAA,EAAA,kBAAgB,OAC9E,QAAQ,KAAK,iBAAiB,KAAK,QAG7C,iBAAkB,WAAA,IAAA,EAAA,KACX,KAAK,sBACR,EAAA,EAAA,UAAS,SAAC,GACR,EAAK,kBAAkB,QAAQ,SAAC,GAAa,OAAA,EAAS,OAExD,KAAK,oBAAqB,IAG9B,oBAAqB,SAAU,GAC7B,KAAK,kBAAkB,KAAK,IAE9B,iBAAkB,SAAU,GAC1B,IAAI,KAAK,iBAAiB,SAAS,GAAnC,CAGA,KAAK,iBAAiB,KAAK,GAE3B,IAAM,EAAM,KAAK,qBAAqB,EAAQ,MAC9C,GAAK,EAAL,CAIA,IAAM,EAAS,KAAK,eACpB,EAAO,IAAM,EACb,EAAO,OAAS,WACd,EAAQ,UAEV,EAAQ,MAAM,GACd,KAAK,oBAAoB,KAAK,0BAA0B,OAE1D,qBAAsB,SAAU,GAC9B,IAAI,EAMJ,OALI,EAAA,EAAA,oBAAmB,GACrB,GAAM,EAAA,EAAA,cAAY,EAAA,EAAA,WAAS,EAAA,EAAA,oBAAmB,MACrC,EAAA,EAAA,oBAAmB,KAC5B,GAAM,EAAA,EAAA,cAAY,EAAA,EAAA,WAAS,EAAA,EAAA,oBAAmB,MAEzC,GAET,aAAc,WACZ,IAAM,EAAS,SAAS,cAAc,UAGtC,OAFA,OAAO,KAAK,GAAmB,QAAQ,SAAC,GAAc,OAAA,EAAO,aAAa,EAAW,EAAkB,MACvG,OAAO,KAAK,GAAe,QAAQ,SAAC,GAAU,OAAA,EAAO,MAAM,YAAY,EAAO,EAAc,MACrF,GAET,0BAA2B,SAAU,GACnC,OAAO,SAAC,GACN,IAAI,EAAA,EAAA,eAAc,WAAW,EAAM,QAEjC,OADiB,EAAM,KAAoB,MAEzC,IAAK,OACG,IAAA,EAAoB,EAAM,KAAxB,EAAK,EAAA,MAAE,EAAM,EAAA,OACrB,EAAO,MAAM,OAAS,EAAS,KAC/B,EAAO,MAAM,MAAQ,EAAQ,KAC7B,MACF,QACE,QAAQ,IAAI,EAAM,UAQzB,EAAO,YACV,EAAU,OACV,EAAO,OAAS,WAAM,OAAA,EAAU,QAChC,EAAO,UAAY,GA9EtB,CAgFE","file":"embed.3440b591.js","sourceRoot":"../src","sourcesContent":["export const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n","import { escapeRegExp } from 'src/utils/helper'\n\nexport const TRIP_PAGE = '/experiences/:slug'\nexport const HOST_PAGE = '/guides/:slug'\nexport const getTripSlugFromUrl = (url: string) => url.match(new RegExp(`^${escapeRegExp(getExternalUrl())}${TRIP_PAGE.replace(':slug', '([^/\\?]+)')}`))?.[1]\nexport const getHostSlugFromUrl = (url: string) => url.match(new RegExp(`^${escapeRegExp(getExternalUrl())}${HOST_PAGE.replace(':slug', '([^/\\?]+)')}`))?.[1]\nexport const tripLink = (slug?: string) => TRIP_PAGE.replace(':slug', slug ?? '')\nexport const hostLink = (slug?: string) => HOST_PAGE.replace(':slug', slug ?? '')\nexport const getEmbedPath = (path: string) => `/embed${path}`\nexport const getEmbedUrl = (path?: string) => `${process.env.EMBED_URL}${path ? `/#${getEmbedPath(path)}` : ''}`\nexport const getExternalUrl = (path: string = '') => `${process.env.SITE_URL}${path}`\n","import { MessageListenerCallback, MessageSender } from 'src/types'\n\nexport const send: MessageSender = (data, options) => {\n  const { target, targetOrigin = '*' } = options ?? {}\n  ;(target || window).postMessage(data, targetOrigin)\n}\n\nexport const register = (listener: MessageListenerCallback) => {\n  window.addEventListener('message', listener, false)\n}\n\nexport const unregister = (listener: MessageListenerCallback) => {\n  window.removeEventListener('message', listener, false)\n}\n","import { getEmbedUrl, getExternalUrl, getHostSlugFromUrl, getTripSlugFromUrl, hostLink, tripLink } from './config/Routes'\nimport { EmbedMessage, EmbedSizeMessage, MessageListenerCallback } from './types'\nimport { register } from './utils/messenger'\ndeclare global {\n  interface Window {\n    OGWidgets: {\n      processedWidgets: HTMLAnchorElement[]\n      listenerCallbacks: MessageListenerCallback[]\n      listenerRegistered: boolean\n      registerListener: () => void\n      getWidgetCallbackUrl: (href: string) => string | undefined\n      createIframe: () => HTMLIFrameElement\n      initializeWidget: (element: HTMLAnchorElement) => void\n      addListenerCallback: (listener: MessageListenerCallback) => void\n      getWidgetListenerCallback: (iframe: HTMLIFrameElement) => MessageListenerCallback\n      init: () => void\n    }\n  }\n}\nconst IFRAME_STYLES = {\n  border: 'none',\n  width: '0px',\n  height: '0px',\n  'overflow-x': 'hidden',\n  'overflow-y': 'hidden',\n  display: 'block',\n} as { [key: string]: string }\n\nconst IFRAME_ATTRIBUTES = {\n  scrolling: 'no',\n  frameborder: '0',\n  allowtransparency: 'true',\n  allowfullscreen: 'true',\n} as { [key: string]: string }\n\n;(function (window) {\n  const OGWidgets = {\n    processedWidgets: [],\n    listenerCallbacks: [],\n    listenerRegistered: false,\n    init: function () {\n      this.registerListener()\n      const widgets = document.querySelectorAll(`a[data-og-widget][href^=\"${getExternalUrl()}\"]`) as NodeListOf<HTMLAnchorElement>\n      widgets.forEach(this.initializeWidget.bind(this))\n    },\n\n    registerListener: function () {\n      if (!this.listenerRegistered) {\n        register((ev) => {\n          this.listenerCallbacks.forEach((listener) => listener(ev))\n        })\n        this.listenerRegistered = true\n      }\n    },\n    addListenerCallback: function (listener) {\n      this.listenerCallbacks.push(listener)\n    },\n    initializeWidget: function (element) {\n      if (this.processedWidgets.includes(element)) {\n        return\n      }\n      this.processedWidgets.push(element)\n\n      const url = this.getWidgetCallbackUrl(element.href)\n      if (!url) {\n        return\n      }\n\n      const iframe = this.createIframe()\n      iframe.src = url\n      iframe.onload = () => {\n        element.remove()\n      }\n      element.after(iframe)\n      this.addListenerCallback(this.getWidgetListenerCallback(iframe))\n    },\n    getWidgetCallbackUrl: function (href) {\n      let url\n      if (getTripSlugFromUrl(href)) {\n        url = getEmbedUrl(tripLink(getTripSlugFromUrl(href)))\n      } else if (getHostSlugFromUrl(href)) {\n        url = getEmbedUrl(hostLink(getHostSlugFromUrl(href)))\n      }\n      return url\n    },\n    createIframe: function () {\n      const iframe = document.createElement('iframe')\n      Object.keys(IFRAME_ATTRIBUTES).forEach((attribute) => iframe.setAttribute(attribute, IFRAME_ATTRIBUTES[attribute]))\n      Object.keys(IFRAME_STYLES).forEach((style) => iframe.style.setProperty(style, IFRAME_STYLES[style]))\n      return iframe\n    },\n    getWidgetListenerCallback: function (iframe) {\n      return (event) => {\n        if (getEmbedUrl().startsWith(event.origin)) {\n          const { type } = event.data as EmbedMessage\n          switch (type) {\n            case 'size':\n              const { width, height } = event.data as EmbedSizeMessage\n              iframe.style.height = height + 'px'\n              iframe.style.width = width + 'px'\n              break\n            default:\n              console.log(event.data)\n              break\n          }\n        }\n      }\n    },\n  } as Window['OGWidgets']\n\n  if (!window.OGWidgets) {\n    OGWidgets.init()\n    window.onload = () => OGWidgets.init()\n    window.OGWidgets = OGWidgets\n  }\n})(window)\n"]}