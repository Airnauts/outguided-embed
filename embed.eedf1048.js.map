{"mappings":"uNAAA,IAAAA,EAAAC,EAAA,S,0BAoBA,MAAMC,EAAgB,CACpBC,OAAQ,OACRC,MAAO,MACPC,OAAQ,MACR,aAAc,SACd,aAAc,SACdC,QAAS,SAGLC,EAAoB,CACxBC,UAAW,KACXC,YAAa,IACbC,kBAAmB,OACnBC,gBAAiB,SAGjB,SAAUC,GACV,MAAMC,EAAY,CAChBC,iBAAkB,GAClBC,kBAAmB,GACnBC,oBAAoB,EACpBC,KAAM,WACJC,KAAKC,mBACWC,SAASC,iBAAiB,6BAA4B,EAAArB,EAAAsB,uBAC9DC,QAAQL,KAAKM,iBAAiBC,KAAKP,M,EAG7CC,iBAAkB,WACXD,KAAKF,sBACR,EAAAU,EAAAC,WAAUC,IACRV,KAAKH,kBAAkBQ,SAASM,GAAaA,EAASD,IAAI,IAE5DV,KAAKF,oBAAqB,E,EAG9Bc,oBAAqB,SAAUD,GAC7BX,KAAKH,kBAAkBgB,KAAKF,E,EAE9BL,iBAAkB,SAAUQ,GAC1B,GAAId,KAAKJ,iBAAiBmB,SAASD,GACjC,OAEFd,KAAKJ,iBAAiBiB,KAAKC,GAE3B,MAAME,EAAMhB,KAAKiB,qBAAqBH,GACtC,IAAKE,EACH,OAGF,MAAME,EAASlB,KAAKmB,aAAaH,GAEjCE,EAAOE,OAAS,KACdN,EAAQO,QAAQ,EAElBP,EAAQQ,MAAMJ,GACdlB,KAAKY,oBAAoBZ,KAAKuB,0BAA0BL,G,EAE1DD,qBAAsB,SAAUH,GAC9B,IAAIE,EACJ,MAAMQ,KACJA,EACAC,SAASC,OAAEA,IACTZ,EAMJ,OALI,EAAAhC,EAAA6C,oBAAmBH,GACrBR,GAAM,EAAAlC,EAAA8C,WAAS,EAAA9C,EAAA6C,oBAAmBH,KACzB,EAAA1C,EAAA+C,oBAAmBL,KAC5BR,GAAM,EAAAlC,EAAAgD,WAAS,EAAAhD,EAAA+C,oBAAmBL,KAE7BR,OAAyB,IAAXU,GAAyB,EAAA5C,EAAAiD,oBAAmBf,IAAO,EAAAlC,EAAAkD,aAAYhB,GAAQ,I,EAE9FG,aAAc,SAAUc,GACtB,IAAIf,EACJ,IACEA,EAAShB,SAASgC,cAAc,kBAAmB,EAAAC,EAAAC,SAAU,c,CAC7D,MAAOC,GACPnB,EAAShB,SAASgC,cAAc,UAChChB,EAAOoB,MAAO,EAAAH,EAAAC,Q,CAKhB,OAHAlB,EAAOe,IAAMA,EAAM,WAAaM,mBAAmB7C,EAAO8C,SAASC,QACnEC,OAAOC,KAAKtD,GAAmBgB,SAASuC,GAAc1B,EAAO2B,aAAaD,EAAWvD,EAAkBuD,MACvGF,OAAOC,KAAK3D,GAAeqB,SAASyC,GAAU5B,EAAO4B,MAAMC,YAAYD,EAAO9D,EAAc8D,MACrF5B,C,EAETK,0BAA2B,SAAUL,GACnC,OAAQ8B,IACN,MAAMP,OACJA,EACAQ,MAAMC,KAAEA,EAAIZ,KAAEA,IACZU,EAEJ,GADAG,QAAQC,IAAI,6BAA8BJ,EAAMC,OAC5C,EAAAnE,EAAAkD,eAAcqB,WAAWZ,IAAWvB,EAAOoB,OAASA,EACtD,OAAQY,GACN,IAAK,OACH,MAAMhE,MAAEA,EAAKC,OAAEA,GAAW6D,EAAMC,KAChC/B,EAAO4B,MAAM3D,OAASA,EAAS,KAC/B+B,EAAO4B,MAAM5D,MAAQA,EAAQ,KAC7B,MACF,IAAK,OACH,MAAMoE,KAAEA,GAASN,EAAMC,KACvBE,QAAQC,IAAI,YAAaE,GACzB5D,EAAO6D,UAAUC,UAAUC,UAAUH,GACrC,MACF,QACEH,QAAQC,IAAIJ,EAAMC,M,IAQzBvD,EAAOC,YACVA,EAAUI,OACVL,EAAO0B,OAAS,IAAMzB,EAAUI,OAChCL,EAAOC,UAAYA,EAEtB,CApGC,CAoGCD,O","sources":["src/embed.ts"],"sourcesContent":["import { getEmbedSnippetUrl, getEmbedUrl, getExternalUrl, getHostSlugFromUrl, getTripSlugFromUrl, hostLink, tripLink } from './config/Routes'\nimport { EmbedCopyMessage, EmbedMessage, EmbedSizeMessage, MessageListenerCallback } from './types'\nimport { getId } from './utils/helper'\nimport { register } from './utils/messenger'\ndeclare global {\n  interface Window {\n    OGWidgets: {\n      processedWidgets: HTMLAnchorElement[]\n      listenerCallbacks: MessageListenerCallback[]\n      listenerRegistered: boolean\n      registerListener: () => void\n      getWidgetCallbackUrl: (element: HTMLAnchorElement) => string | undefined\n      createIframe: (src: string) => HTMLIFrameElement\n      initializeWidget: (element: HTMLAnchorElement) => void\n      addListenerCallback: (listener: MessageListenerCallback) => void\n      getWidgetListenerCallback: (iframe: HTMLIFrameElement) => MessageListenerCallback\n      init: () => void\n    }\n  }\n}\nconst IFRAME_STYLES = {\n  border: 'none',\n  width: '0px',\n  height: '0px',\n  'overflow-x': 'hidden',\n  'overflow-y': 'hidden',\n  display: 'block',\n} as { [key: string]: string }\n\nconst IFRAME_ATTRIBUTES = {\n  scrolling: 'no',\n  frameborder: '0',\n  allowtransparency: 'true',\n  allowfullscreen: 'true',\n} as { [key: string]: string }\n\n;(function (window) {\n  const OGWidgets = {\n    processedWidgets: [],\n    listenerCallbacks: [],\n    listenerRegistered: false,\n    init: function () {\n      this.registerListener()\n      const widgets = document.querySelectorAll(`a[data-og-widget][href^=\"${getExternalUrl()}\"]`) as NodeListOf<HTMLAnchorElement>\n      widgets.forEach(this.initializeWidget.bind(this))\n    },\n\n    registerListener: function () {\n      if (!this.listenerRegistered) {\n        register((ev) => {\n          this.listenerCallbacks.forEach((listener) => listener(ev))\n        })\n        this.listenerRegistered = true\n      }\n    },\n    addListenerCallback: function (listener) {\n      this.listenerCallbacks.push(listener)\n    },\n    initializeWidget: function (element) {\n      if (this.processedWidgets.includes(element)) {\n        return\n      }\n      this.processedWidgets.push(element)\n\n      const url = this.getWidgetCallbackUrl(element)\n      if (!url) {\n        return\n      }\n\n      const iframe = this.createIframe(url)\n\n      iframe.onload = () => {\n        element.remove()\n      }\n      element.after(iframe)\n      this.addListenerCallback(this.getWidgetListenerCallback(iframe))\n    },\n    getWidgetCallbackUrl: function (element) {\n      let url\n      const {\n        href,\n        dataset: { ogCode },\n      } = element\n      if (getTripSlugFromUrl(href)) {\n        url = tripLink(getTripSlugFromUrl(href))\n      } else if (getHostSlugFromUrl(href)) {\n        url = hostLink(getHostSlugFromUrl(href))\n      }\n      return url ? (typeof ogCode !== 'undefined' ? getEmbedSnippetUrl(url) : getEmbedUrl(url)) : null\n    },\n    createIframe: function (src) {\n      let iframe: HTMLIFrameElement\n      try {\n        iframe = document.createElement('<iframe name=\"' + getId() + '\"></iframe>') as HTMLIFrameElement\n      } catch (e) {\n        iframe = document.createElement('iframe')\n        iframe.name = getId()\n      }\n      iframe.src = src + '?source=' + encodeURIComponent(window.location.origin)\n      Object.keys(IFRAME_ATTRIBUTES).forEach((attribute) => iframe.setAttribute(attribute, IFRAME_ATTRIBUTES[attribute]))\n      Object.keys(IFRAME_STYLES).forEach((style) => iframe.style.setProperty(style, IFRAME_STYLES[style]))\n      return iframe\n    },\n    getWidgetListenerCallback: function (iframe) {\n      return (event) => {\n        const {\n          origin,\n          data: { type, name },\n        } = event as MessageEvent<EmbedMessage>\n        console.log('event received from iframe', event.data)\n        if (getEmbedUrl().startsWith(origin) && iframe.name === name) {\n          switch (type) {\n            case 'size':\n              const { width, height } = event.data as EmbedSizeMessage\n              iframe.style.height = height + 'px'\n              iframe.style.width = width + 'px'\n              break\n            case 'copy':\n              const { text } = event.data as EmbedCopyMessage\n              console.log('copy text', text)\n              window.navigator.clipboard.writeText(text)\n              break\n            default:\n              console.log(event.data)\n              break\n          }\n        }\n      }\n    },\n  } as Window['OGWidgets']\n\n  if (!window.OGWidgets) {\n    OGWidgets.init()\n    window.onload = () => OGWidgets.init()\n    window.OGWidgets = OGWidgets\n  }\n})(window)\n"],"names":["$94AO8","parcelRequire","$0c723f6dfbdc3c06$var$IFRAME_STYLES","border","width","height","display","$0c723f6dfbdc3c06$var$IFRAME_ATTRIBUTES","scrolling","frameborder","allowtransparency","allowfullscreen","window","OGWidgets","processedWidgets","listenerCallbacks","listenerRegistered","init","this","registerListener","document","querySelectorAll","getExternalUrl","forEach","initializeWidget","bind","$9rkCf","register","ev","listener","addListenerCallback","push","element","includes","url","getWidgetCallbackUrl","iframe","createIframe","onload","remove","after","getWidgetListenerCallback","href","dataset","ogCode","getTripSlugFromUrl","tripLink","getHostSlugFromUrl","hostLink","getEmbedSnippetUrl","getEmbedUrl","src","createElement","$50qLl","getId","e","name","encodeURIComponent","location","origin","Object","keys","attribute","setAttribute","style","setProperty","event","data","type","console","log","startsWith","text","navigator","clipboard","writeText"],"version":3,"file":"embed.eedf1048.js.map"}