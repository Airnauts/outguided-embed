{"version":3,"sources":["config/Routes.ts","embed.ts"],"names":[],"mappings":";AAMO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,SAAA,QAAA,eAAA,QAAA,YAAA,QAAA,aAAA,QAAA,UAAA,QAAA,eAAA,EANA,IAAM,EAAY,qBAMlB,QAAA,UAAA,EALA,IAAM,EAAY,gBAKlB,QAAA,UAAA,EAJA,IAAM,EAAW,SAAC,GAAiB,OAAA,EAAU,QAAQ,QAAS,IAI9D,QAAA,SAAA,EAHA,IAAM,EAAW,SAAC,GAAiB,OAAA,EAAU,QAAQ,QAAS,IAG9D,QAAA,SAAA,EAFA,IAAM,EAAe,SAAC,GAAiB,MAAA,SAAA,OAAS,IAEhD,QAAA,aAAA,EADA,IAAM,EAAc,SAAC,GAAkB,MAAA,GAAA,OAAwB,wBAAA,OAAG,EAAO,KAAA,OAAK,EAAa,IAAU,KACrG,QAAA,YAAA,EAAA,IAAM,EAAiB,SAAC,GAAsB,YAAtB,IAAA,IAAA,EAAA,IAAsB,GAAA,OAAuB,6BAAA,OAAG,IAAxE,QAAA,eAAA;;ACIN,aAVD,IAAA,EAAA,QAAA,oBAUC,SAAW,GACR,EAAO,OAAS,WACK,SAAS,iBACtB,+CAGK,QAAQ,SAAC,GACd,EAAQ,aAAa,sBAAuB,KACtC,IAAA,EAAgC,EAAQ,QAAtC,EAAQ,EAAA,SAAE,EAAM,EAAA,OAAE,EAAO,EAAA,QACjC,GAAK,EAAL,CAGA,IAAI,EACJ,OAAQ,GACJ,IAAK,OACD,EAAM,IAAU,EAAA,EAAA,cAAY,EAAA,EAAA,UAAS,IACrC,MACJ,IAAK,QACD,EAAM,IAAW,EAAA,EAAA,cAAY,EAAA,EAAA,UAAS,IAI9C,GAAK,EAAL,CAIA,IAAM,EAAO,EAAQ,aAAa,QAClC,GAAK,MAAA,OAAI,EAAJ,EAAM,YAAW,EAAA,EAAA,mBAAtB,CAIA,IAAM,EAAS,SAAS,cAAc,UACtC,EAAO,IAAM,EACb,EAAO,MAAM,OAAS,OACtB,EAAO,MAAM,UAAY,SACzB,EAAO,MAAM,UAAY,SACzB,EAAO,MAAM,QAAU,QAEvB,MAAA,GAAA,EAAQ,iBACJ,UACA,SAAC,GAEG,GADA,QAAQ,IAAI,IACR,EAAA,EAAA,eAAc,WAAW,EAAM,QAE/B,OADiB,EAAM,KAAoB,MAEvC,IAAK,OACK,IAAA,EAAoB,EAAM,KAAxB,EAAK,EAAA,MAAE,EAAM,EAAA,OACrB,EAAO,MAAM,OAAS,EAAS,KAC/B,EAAO,MAAM,MAAQ,EAAQ,KAC7B,MACJ,IAAK,QACD,QAAQ,IAAI,kBAK5B,GAEJ,EAAQ,MAAM,GACd,EAAQ,MAAM,QAAU,aA3DnC,CA8DE","file":"embed.b43d3abe.js","sourceRoot":"../src","sourcesContent":["export const TRIP_PAGE = '/experiences/:slug'\nexport const HOST_PAGE = '/guides/:slug'\nexport const tripLink = (slug: string) => TRIP_PAGE.replace(':slug', slug)\nexport const hostLink = (slug: string) => HOST_PAGE.replace(':slug', slug)\nexport const getEmbedPath = (path: string) => `/embed${path}`\nexport const getEmbedUrl = (path?: string) => `${process.env.EMBED_URL}${path ? `/#${getEmbedPath(path)}` : ''}`\nexport const getExternalUrl = (path: string = '') => `${process.env.SITE_URL}${path}`\n","import { getEmbedUrl, getExternalUrl, hostLink, tripLink } from './config/Routes'\nimport { EmbedMessage, EmbedSizeMessage } from './types'\ndeclare global {\n    interface Window {\n        OGWidgets: {\n            init: () => void\n        }\n    }\n}\n\n;(function (window) {\n    window.onload = () => {\n        const elements = document.querySelectorAll(\n            '[data-og-widget]:not([data-og-initialized])'\n        ) as NodeListOf<HTMLElement>\n\n        elements.forEach((element) => {\n            element.setAttribute('data-og-initialized', '1')\n            const { ogWidget, ogTrip, ogGuide } = element.dataset\n            if (!ogWidget) {\n                return\n            }\n            let url\n            switch (ogWidget) {\n                case 'trip':\n                    url = ogTrip && getEmbedUrl(tripLink(ogTrip))\n                    break\n                case 'guide':\n                    url = ogGuide && getEmbedUrl(hostLink(ogGuide))\n                    break\n            }\n\n            if (!url) {\n                return\n            }\n\n            const href = element.getAttribute('href')\n            if (!href?.startsWith(getExternalUrl())) {\n                return\n            }\n\n            const iframe = document.createElement('iframe')\n            iframe.src = url\n            iframe.style.border = 'none'\n            iframe.style.overflowX = 'hidden'\n            iframe.style.overflowY = 'hidden'\n            iframe.style.display = 'block'\n\n            window?.addEventListener(\n                'message',\n                (event) => {\n                    console.log(event)\n                    if (getEmbedUrl().startsWith(event.origin)) {\n                        const { type } = event.data as EmbedMessage\n                        switch (type) {\n                            case 'size':\n                                const { width, height } = event.data as EmbedSizeMessage\n                                iframe.style.height = height + 'px'\n                                iframe.style.width = width + 'px'\n                                break\n                            case 'other':\n                                console.log('other event')\n                                break\n                        }\n                    }\n                },\n                false\n            )\n            element.after(iframe)\n            element.style.display = 'none'\n        })\n    }\n})(window)\n"]}