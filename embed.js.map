{"version":3,"sources":["config/Routes.ts","utils/messenger.ts","embed.ts"],"names":[],"mappings":"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","file":"embed.js","sourceRoot":"../src","sourcesContent":["export const TRIP_PAGE = '/experiences/:slug'\nexport const HOST_PAGE = '/guides/:slug'\nexport const tripLink = (slug: string) => TRIP_PAGE.replace(':slug', slug)\nexport const hostLink = (slug: string) => HOST_PAGE.replace(':slug', slug)\nexport const getEmbedPath = (path: string) => `/embed${path}`\nexport const getEmbedUrl = (path?: string) => `${process.env.EMBED_URL}${path ? `/#${getEmbedPath(path)}` : ''}`\nexport const getExternalUrl = (path: string = '') => `${process.env.SITE_URL}${path}`\n","import { MessageListener, MessageSender } from 'src/types'\n\nexport const sendToParent: MessageSender = (\n  data,\n  options = {\n    targetOrigin: '*',\n  }\n) => {\n  window.parent.postMessage(data, options.targetOrigin)\n}\n\nexport const send: MessageSender = (\n  data,\n  options = {\n    targetOrigin: '*',\n  }\n) => {\n  window.postMessage(data, options.targetOrigin)\n}\n\nexport const register = (listener: MessageListener) => {\n  window.addEventListener('message', listener, false)\n}\n\nexport const unregister = (listener: MessageListener) => {\n  window.removeEventListener('message', listener, false)\n}\n","import { getEmbedUrl, getExternalUrl, hostLink, tripLink } from './config/Routes'\nimport { EmbedMessage, EmbedSizeMessage, MessageListener } from './types'\nimport { register } from './utils/messenger'\ndeclare global {\n  interface Window {\n    OGWidgets: {\n      processedWidgets: HTMLElement[]\n      listeners: MessageListener[]\n      listenersRegistered: boolean\n      registerListeners: () => void\n      getWidgetsToInitialize: () => HTMLElement[]\n      getWidgetCallbackUrl: (type: string, params: { trip?: string; guide?: string }) => string | undefined\n      isValidWidgetElement: (element: HTMLElement) => boolean\n      initializeWidget: (element: HTMLElement) => void\n      addListener: (listener: MessageListener) => void\n      getWidgetListener: (element: HTMLElement, iframe: HTMLIFrameElement) => MessageListener\n      init: () => void\n    }\n  }\n}\n\n;(function (window) {\n  const OGWidgets = {\n    processedWidgets: [],\n    listeners: [],\n    listenersRegistered: false,\n    addListener: function (listener: MessageListener) {\n      this.listeners.push(listener)\n    },\n    registerListeners: function () {\n      if (!this.listenersRegistered) {\n        register((ev) => {\n          this.listeners.forEach((listener) => listener(ev))\n        })\n        this.listenersRegistered = true\n      }\n    },\n    isValidWidgetElement: function (element) {\n      if (!element.getAttribute('href')?.startsWith(getExternalUrl())) {\n        return false\n      }\n\n      if (!element.dataset.ogWidget) {\n        return false\n      }\n\n      return true\n    },\n    getWidgetListener: function (element, iframe) {\n      return (event) => {\n        if (getEmbedUrl().startsWith(event.origin)) {\n          const { type } = event.data as EmbedMessage\n          switch (type) {\n            case 'size':\n              const { width, height } = event.data as EmbedSizeMessage\n              iframe.style.height = height + 'px'\n              iframe.style.width = width + 'px'\n              break\n            case 'other':\n              console.log('other event')\n              break\n          }\n        }\n      }\n    },\n    getWidgetCallbackUrl: function (name, { trip, guide }) {\n      let url\n      switch (name) {\n        case 'trip':\n          url = trip && getEmbedUrl(tripLink(trip))\n          break\n        case 'guide':\n          url = guide && getEmbedUrl(hostLink(guide))\n          break\n      }\n      return url\n    },\n    getWidgetsToInitialize: function () {\n      return Array.from(document.querySelectorAll('[data-og-widget]') as NodeListOf<HTMLElement>).filter(\n        (widget) => !this.processedWidgets.includes(widget)\n      )\n    },\n    initializeWidget: function (element) {\n      this.processedWidgets.push(element)\n\n      if (!this.isValidWidgetElement(element)) {\n        return\n      }\n\n      const { ogWidget, ogTrip, ogGuide } = element.dataset\n      const url = this.getWidgetCallbackUrl(ogWidget!, { trip: ogTrip, guide: ogGuide })\n      if (!url) {\n        return\n      }\n\n      const iframe = document.createElement('iframe')\n      iframe.src = url\n      iframe.style.border = 'none'\n      iframe.style.width = '0px'\n      iframe.style.height = '0px'\n      iframe.style.overflowX = 'hidden'\n      iframe.style.overflowY = 'hidden'\n      iframe.style.display = 'block'\n\n      this.addListener(this.getWidgetListener(element, iframe))\n\n      element.after(iframe)\n      element.style.display = 'none'\n    },\n    init: function () {\n      this.registerListeners()\n      this.getWidgetsToInitialize().forEach(this.initializeWidget.bind(this))\n    },\n  } as Window['OGWidgets']\n\n  if (!window.OGWidgets) {\n    window.onload = () => OGWidgets.init()\n    window.OGWidgets = OGWidgets\n  }\n})(window)\n"]}