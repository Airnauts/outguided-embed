{"mappings":"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","sources":["src/config/Widgets.ts","src/utils/helper.ts","src/config/Routes.ts","src/utils/log.ts","src/utils/messenger.ts","src/embed.ts"],"sourcesContent":["export const EMBED_SCRIPT = `<script async src=\"${process.env.EMBED_URL}/embed.js\"></script>`\nexport const EXAMPLE_TRIP = process.env.EXAMPLE_TRIP_URL || ''\n","import { EMBED_SCRIPT } from 'src/config/Widgets'\nimport { SnippetLinkFunction } from 'src/types'\n\nexport const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n\nexport const getSnippetLink: SnippetLinkFunction = (url, label = 'Powered by outguided.com', { data = {}, withEmbedCode } = {}) => {\n  const attributeString = Object.keys({ ...data, widget: '' })\n    .map((key) => ` data-og-${key}${data[key] ? `=\"${data[key]}\"` : ''}`)\n    .join('')\n  return `<a href=\"${url}\"${attributeString}>${label}</a>${withEmbedCode ? EMBED_SCRIPT : ''}`\n}\n\nexport const getId = () => String(Date.now().toString(32) + Math.random().toString(16)).replace(/\\./g, '')\n","import { escapeRegExp } from 'src/utils/helper'\n\nexport const TRIP_PAGE = '/experiences/:slugOrId'\nexport const HOST_PAGE = '/guides/:slugOrId'\nexport const getTripSlugFromUrl = (url: string) => url.match(new RegExp(`^${escapeRegExp(getExternalUrl())}${TRIP_PAGE.replace(':slugOrId', '([^/?]+)')}`))?.[1]\nexport const getHostSlugFromUrl = (url: string) => url.match(new RegExp(`^${escapeRegExp(getExternalUrl())}${HOST_PAGE.replace(':slugOrId', '([^/?]+)')}`))?.[1]\nexport const tripLink = (slugOrId?: string | number) => TRIP_PAGE.replace(':slugOrId', slugOrId ? '' + slugOrId : '')\nexport const hostLink = (slugOrId?: string | number) => HOST_PAGE.replace(':slugOrId', slugOrId ? '' + slugOrId : '')\nexport const getEmbedPath = (path: string) => `/embed${path}`\nexport const getEmbedSnippetPath = (path: string) => `/code${path}`\nexport const getEmbedUrl = (path?: string) => `${process.env.EMBED_URL}${path ? `/#${getEmbedPath(path)}` : ''}`\nexport const getEmbedSnippetUrl = (path?: string) => `${process.env.EMBED_URL}${path ? `/#${getEmbedSnippetPath(path)}` : ''}`\nexport const getExternalUrl = (path: string = '') => `${process.env.SITE_URL}${path}`\n","export const log = (message?: any, ...optionalParams: any[]): void => {\n  if (!!process.env.DEBUG) {\n    console.log(message, ...optionalParams)\n  }\n}\n","import { MessageListenerCallback, MessageSender } from 'src/types'\n\nexport const send: MessageSender = (data, options) => {\n  const { target, targetOrigin = '*' } = options ?? {}\n  ;(target || window).postMessage(data, targetOrigin)\n}\n\nexport const register = (listener: MessageListenerCallback) => {\n  window.addEventListener('message', listener, false)\n}\n\nexport const unregister = (listener: MessageListenerCallback) => {\n  window.removeEventListener('message', listener, false)\n}\n","import { getEmbedSnippetUrl, getEmbedUrl, getExternalUrl, getHostSlugFromUrl, getTripSlugFromUrl, hostLink, tripLink } from './config/Routes'\nimport { EmbedCopyMessage, EmbedMessage, EmbedSizeMessage, MessageListenerCallback } from './types'\nimport { getId } from './utils/helper'\nimport { log } from './utils/log'\nimport { register } from './utils/messenger'\ndeclare global {\n  interface Window {\n    OGWidgets: {\n      processedWidgets: HTMLAnchorElement[]\n      listenerCallbacks: MessageListenerCallback[]\n      listenerRegistered: boolean\n      registerListener: () => void\n      getWidgetCallbackUrl: (element: HTMLAnchorElement) => string | undefined\n      createIframe: (src: string) => HTMLIFrameElement\n      initializeWidget: (element: HTMLAnchorElement) => void\n      addListenerCallback: (listener: MessageListenerCallback) => void\n      getWidgetListenerCallback: (iframe: HTMLIFrameElement) => MessageListenerCallback\n      init: () => void\n    }\n  }\n}\nconst IFRAME_STYLES = {\n  border: 'none',\n  width: '100%',\n  height: '0px',\n  'overflow-x': 'hidden',\n  'overflow-y': 'hidden',\n  display: 'block',\n} as { [key: string]: string }\n\nconst IFRAME_ATTRIBUTES = {\n  scrolling: 'no',\n  frameborder: '0',\n  allowtransparency: 'true',\n  allowfullscreen: 'true',\n} as { [key: string]: string }\n\n;(function (window) {\n  const OGWidgets = {\n    processedWidgets: [],\n    listenerCallbacks: [],\n    listenerRegistered: false,\n    init: function () {\n      this.registerListener()\n      const widgets = document.querySelectorAll(`a[data-og-widget][href^=\"${getExternalUrl()}\"]`) as NodeListOf<HTMLAnchorElement>\n      widgets.forEach(this.initializeWidget.bind(this))\n    },\n\n    registerListener: function () {\n      if (!this.listenerRegistered) {\n        register((ev) => {\n          this.listenerCallbacks.forEach((listener) => listener(ev))\n        })\n        this.listenerRegistered = true\n      }\n    },\n    addListenerCallback: function (listener) {\n      this.listenerCallbacks.push(listener)\n    },\n    initializeWidget: function (element) {\n      if (this.processedWidgets.includes(element)) {\n        return\n      }\n      this.processedWidgets.push(element)\n\n      const url = this.getWidgetCallbackUrl(element)\n      if (!url) {\n        return\n      }\n\n      const iframe = this.createIframe(url)\n\n      iframe.onload = () => {\n        element.remove()\n      }\n      element.after(iframe)\n      this.addListenerCallback(this.getWidgetListenerCallback(iframe))\n    },\n    getWidgetCallbackUrl: function (element) {\n      let url\n      const {\n        href,\n        dataset: { ogCode },\n      } = element\n      if (getTripSlugFromUrl(href)) {\n        url = tripLink(getTripSlugFromUrl(href))\n      } else if (getHostSlugFromUrl(href)) {\n        url = hostLink(getHostSlugFromUrl(href))\n      }\n      return url ? (typeof ogCode !== 'undefined' ? getEmbedSnippetUrl(url) : getEmbedUrl(url)) : null\n    },\n    createIframe: function (src) {\n      let iframe: HTMLIFrameElement\n      try {\n        iframe = document.createElement('<iframe name=\"' + getId() + '\"></iframe>') as HTMLIFrameElement\n      } catch (e) {\n        iframe = document.createElement('iframe')\n        iframe.name = getId()\n      }\n      iframe.src = src + '?source=' + encodeURIComponent(window.location.origin)\n      Object.keys(IFRAME_ATTRIBUTES).forEach((attribute) => iframe.setAttribute(attribute, IFRAME_ATTRIBUTES[attribute]))\n      Object.keys(IFRAME_STYLES).forEach((style) => iframe.style.setProperty(style, IFRAME_STYLES[style]))\n      return iframe\n    },\n    getWidgetListenerCallback: function (iframe) {\n      return (event) => {\n        const {\n          origin,\n          data: { type, name },\n        } = event as MessageEvent<EmbedMessage>\n\n        log('received event:', event.data)\n\n        if (getEmbedUrl().startsWith(origin) && iframe.name === name) {\n          switch (type) {\n            case 'size':\n              const { width, height } = event.data as EmbedSizeMessage\n              iframe.style.height = height + 'px'\n              // iframe.style.width = width + 'px'\n              break\n            case 'copy':\n              const { text } = event.data as EmbedCopyMessage\n              window.navigator.clipboard.writeText(text)\n              break\n            default:\n              break\n          }\n        }\n      }\n    },\n  } as Window['OGWidgets']\n\n  if (!window.OGWidgets) {\n    OGWidgets.init()\n    window.onload = () => OGWidgets.init()\n    window.OGWidgets = OGWidgets\n  }\n})(window)\n"],"names":["$c682e8e0c5307b59$export$7c57da42ce8e346f","string","replace","$c682e8e0c5307b59$export$218c8c3169c024d2","String","Date","now","toString","Math","random","$0b8663bc7cecdb90$export$555eef29177cc31","$0b8663bc7cecdb90$export$cf202a6c1ba41c5a","$0b8663bc7cecdb90$export$c4788f277b5fd66c","url","ref","match","RegExp","$0b8663bc7cecdb90$export$7776a5f5857d1ad6","$0b8663bc7cecdb90$export$b3a523fa6950e5ba","$0b8663bc7cecdb90$export$4e19848623c50785","slugOrId","$0b8663bc7cecdb90$export$bc5948d2034163b0","path","$0b8663bc7cecdb90$export$d60fc661bbc8657","$ac105874961b2a21$export$bef1f36f5486a6a3","message","optionalParams","console","log","$5bf8c292786c59be$export$6503ec6e8aabbaf","listener","window","addEventListener","$0c723f6dfbdc3c06$var$IFRAME_STYLES","border","width","height","display","$0c723f6dfbdc3c06$var$IFRAME_ATTRIBUTES","scrolling","frameborder","allowtransparency","allowfullscreen","OGWidgets","processedWidgets","listenerCallbacks","listenerRegistered","init","this","registerListener","document","querySelectorAll","forEach","initializeWidget","bind","ev","addListenerCallback","push","element","includes","getWidgetCallbackUrl","iframe","createIframe","onload","remove","after","getWidgetListenerCallback","href","dataset","ogCode","$0b8663bc7cecdb90$export$3d2b26ba3d3c183e","src","createElement","e","name","encodeURIComponent","location","origin","Object","keys","attribute","setAttribute","style","setProperty","event","data","type","startsWith","text","navigator","clipboard","writeText"],"version":3,"file":"embed.js.map"}